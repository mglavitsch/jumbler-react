name: Build and deploy project jumbler-app-js

on:
  push:
    branches:
      - master
      
permissions:
  id-token: write
  contents: read

jobs:
  wf-jumbler-app-js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '24.5.0'

      - name: Install dependencies
        run: |
          cd jumbler-app-js
          npm install

      - name: Build project
        run: |
          cd jumbler-app-js
          npm run build

      - name: Assume AWS Role via OIDC
        id: assume-role
        run: |
          ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}"

          # Request OIDC-Token from GitHub
          OIDC_TOKEN=$(curl -sSL \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" \
            | jq -r '.value')

          # Assume AWS role via OIDC
          CREDS_JSON=$(aws sts assume-role-with-web-identity \
            --role-arn "$ROLE_ARN" \
            --role-session-name github-actions \
            --web-identity-token "$OIDC_TOKEN" \
            --duration-seconds 900)

          echo "$CREDS_JSON" > creds.json

          export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' creds.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' creds.json)
          export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' creds.json)

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

      - name: Deploy to S3
        run: |
          aws s3 rm s3://${{ secrets.AWS_BUCKET_NAME }}/ --recursive
          cd jumbler-app-js/dist
          aws s3 cp bundle.*.js s3://${{ secrets.AWS_BUCKET_NAME }}/ --cache-control "max-age=31536000, immutable"
          aws s3 cp THIRD-PARTY-LICENSES.*.txt s3://${{ secrets.AWS_BUCKET_NAME }}/ --cache-control "max-age=31536000, immutable"
          aws s3 cp index.html s3://${{ secrets.AWS_BUCKET_NAME }}/index.html --cache-control "max-age=0, no-cache, no-store, must-revalidate"